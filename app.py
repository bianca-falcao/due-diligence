import streamlit as st
import requests
import urllib.parse

API_KEY = st.secrets["api_keys"]["API_KEY"]

st.set_page_config(page_title="üîé Dilig√™ncia", layout="wide")
st.title("üîé Dilig√™ncia")
menu = st.sidebar.radio(
    "üìÇ Selecione a consulta:",
    ["Pessoa Politicamente Exposta", "Pessoa F√≠sica", "Pessoa Jur√≠dica", "M√≠dia Negativa", "Listas Restritivas Nacionais e Internacionais"], index=0
)
if menu == "Pessoa Politicamente Exposta":
    st.header("üßëüèª‚Äçüíº Pessoa Politicamente Exposta")
    BASE_URL_PEP = "https://api.portaldatransparencia.gov.br/api-de-dados/peps"

    cpf = st.text_input("Digite o CPF (sem d√≠gitos):")

    if st.button("Consultar"):
        headers = {"chave-api-dados": API_KEY}
        params = {"cpf": cpf, "pagina": 1}
        response = requests.get(BASE_URL_PEP, headers=headers, params=params)

        if response.status_code == 200:
            data = response.json()
            if data:  
                st.success(f"‚úÖ {len(data)} PEP(s) encontrado(s)!")
                
                for pep in data:  
                    st.write(f"**Nome:** {pep.get('nome', 'N√£o informado')}")
                    st.write(f"**Fun√ß√£o:** {pep.get('descricao_funcao', 'N√£o informado')}")
                    st.write(f"**√ìrg√£o:** {pep.get('nome_orgao', 'N√£o informado')}")
                    st.write(f"**In√≠cio do exerc√≠cio:** {pep.get('dt_inicio_exercicio', 'N√£o informado')}")
                    st.markdown("---")
            else:
                st.info("üî¥ Nenhum PEP encontrado.")
        else:
            st.error("‚ùå Erro na requisi√ß√£o √† API.")
elif menu == "Pessoa F√≠sica":
    BASE_URL_PF = "https://api.portaldatransparencia.gov.br/api-de-dados/pessoa-fisica"

    st.header("üßëüèª‚Äçüíº Servidores, San√ß√µes e Benef√≠cios - Pessoa F√≠sica")
    st.info("Consulta de Servidores P√∫blicos Federais, Sancionados CEIS, CNEP, CEAF")
    
    cpf_dadosgerais = st.text_input("Digite o CPF (sem d√≠gitos):")
    if st.button("Buscar"):
        headers = {"chave-api-dados": API_KEY}
        params = {"cpf": cpf_dadosgerais}
        response = requests.get(BASE_URL_PF, headers=headers, params=params)
        
        if response.status_code == 200:
            data = response.json()

            if data:  # retorna um dicion√°rio
                st.success("‚úÖ Dados encontrados!")
                st.write(f"**Nome:** {data.get('nome', 'N√£o informado')}")
                st.write(f"**CPF:** {data.get('cpf', 'N√£o informado')}")
                if data.get('servidor') is True:
                    st.write(f"**Servidor:** ‚ö†Ô∏è Sim")
                if data.get('servidor') is False:
                    st.write(f"**Servidor:** N√£o")
                if data.get('sancionadoCEIS') is True:
                    st.write(f"**Sancionado CEIS:** ‚ö†Ô∏è Sim")
                if data.get('sancionadoCEIS') is False:
                    st.write(f"**Sancionado CEIS:** N√£o")
                if data.get('sancionadoCNEP') is True:
                    st.write(f"**CNEP:** ‚ö†Ô∏è Sim")
                if data.get('sancionadoCNEP') is False:
                    st.write(f"**CNEP:** N√£o")
                if data.get('sancionadoCEAF') is True:
                    st.write(f"**CEAF:** ‚ö†Ô∏è Sim")
                if data.get('sancionadoCEAF') is False:
                    st.write(f"**CEAF:** N√£o")
                if data.get('participanteLicitacao') is True:
                    st.write(f"**Participante de Licita√ß√µes:** ‚ö†Ô∏è Sim")
                if data.get('participanteLicitacao') is False:
                    st.write(f"**Participante de Licita√ß√µes:** N√£o")
                if data.get('favorecidoAuxilioBrasil') is True:
                    st.write(f"**Aux√≠lio Brasil:** ‚ö†Ô∏è Sim")
                if data.get('favorecidoAuxilioBrasil') is False:
                    st.write(f"**Aux√≠lio Brasil:** N√£o")
                if data.get('favorecidoBolsaFamilia') is True:
                    st.write(f"**Bolsa Fam√≠lia:** ‚ö†Ô∏è Sim")
                if data.get('favorecidoBolsaFamilia') is False:
                    st.write(f"**Bolsa Fam√≠lia:** N√£o")
                if data.get('favorecidoNovoBolsaFamilia') is True:
                    st.write(f"**Novo Bolsa Fam√≠lia:** ‚ö†Ô∏è Sim")
                if data.get('favorecidoNovoBolsaFamilia') is False:
                    st.write(f"**Novo Bolsa Fam√≠lia:** N√£o")
            else:
                st.info("üî¥ Nenhum dado encontrado.")
        else:
            st.error("‚ùå Erro na requisi√ß√£o √† API.")

elif menu == "Pessoa Jur√≠dica":

    BASE_URL_PJ = "https://api.portaldatransparencia.gov.br/api-de-dados/pessoa-juridica"
    st.header("üè¢ San√ß√µes, Contratos, Conv√™nios - Pessoa Jur√≠dica")
    st.info("Consulta de San√ß√µes, Contratos e Conv√™nios para Pessoas Jur√≠dicas.")

    cnpj = st.text_input("Digite um CNPJ (sem d√≠gitos) para consulta:")
    if st.button("Consultar"):
        headers = {"chave-api-dados": API_KEY}
        params = {"cnpj": cnpj}
        response = requests.get(BASE_URL_PJ, headers=headers, params=params)
        
        if response.status_code == 200:
            data = response.json()

            if data:  # retorna um dicion√°rio
                st.success("‚úÖ Dados encontrados!")
                st.write(f"**Raz√£o Social:** {data.get('razaoSocial', 'N√£o informado')}")
                st.write(f"**CNPJ:** {data.get('cnpj', 'N√£o informado')}")
                if data.get('possuiContratacao') is True:
                    st.write(f"**Possui Contrata√ß√£o com o Poder P√∫blico:** ‚ö†Ô∏è Sim")
                if data.get('possuiContratacao') is False:
                    st.write(f"**Possui Contrata√ß√£o com o Poder P√∫blico:** N√£o")
                if data.get('convenios') is True:
                    st.write(f"**Possui Conv√™nios com o Poder P√∫blico:** ‚ö†Ô∏è Sim")
                if data.get('convenios') is False:
                    st.write(f"**Possui Conv√™nios com o Poder P√∫blico:** N√£o")
                if data.get('participanteLicitacao') is True:
                    st.write(f"**√â participante de Licita√ß√£o:** ‚ö†Ô∏è Sim")
                if data.get('participanteLicitacao') is False:
                    st.write(f"**√â participante de Licita√ß√£o:** N√£o")
                if data.get('emitiuNFe') is True:
                    st.write(f"**Emitiu NFe para o Poder P√∫blico:** ‚ö†Ô∏è Sim")
                if data.get('emitiuNFe') is False:
                    st.write(f"**Emitiu NFe para o Poder P√∫blico:** N√£o")
                if data.get('sancionadoCEPIM') is True:
                    st.write(f"**Sancionado CEPIM:** ‚ö†Ô∏è Sim")
                if data.get('sancionadoCEPIM') is False:
                    st.write(f"**Sancionado CEPIM:** N√£o")
                if data.get('sancionadoCEIS') is True:
                    st.write(f"**Sancionado CEIS:** ‚ö†Ô∏è Sim")
                if data.get('sancionadoCEIS') is False:
                    st.write(f"**Sancionado CEIS:** N√£o")
                if data.get('sancionadoCNEP') is True:
                    st.write(f"**Sancionado CNEP:** ‚ö†Ô∏è Sim")
                if data.get('sancionadoCEAF') is True:
                    st.write(f"**Sancionado CEAF:** ‚ö†Ô∏è Sim")
                if data.get('sancionadoCEAF') is False:
                    st.write(f"**Sancionado CEAF:** N√£o")

            else:
                st.info("üî¥ Nenhum dado encontrado.")
        else:
            st.error("‚ùå Erro na requisi√ß√£o √† API.")

elif menu == "M√≠dia Negativa":
    st.header("üì∫ M√≠dia Negativa")
    st.info("Busca no Google usando operadores avan√ßados para encontrar not√≠cias negativas relacionadas a um termo principal e palavras-chave espec√≠ficas.")

    termo = st.text_input("Digite o termo principal (ex: nome ou empresa):")

    # Palavras-chave padr√£o
    palavras_chave = ["fraude","corrup√ß√£o","suborno","propina","lavagem de dinheiro","enriquecimento il√≠cito","desvio de recursos","peculato","tr√°fico de influ√™ncia","conflito de interesses","cartel","concorr√™ncia desleal","licita√ß√£o fraudulenta","superfaturamento","rachadinha","caixa dois","sonega√ß√£o","evas√£o fiscal","d√≠vida ativa","crime tribut√°rio","irregularidade fiscal","estelionato","falsidade ideol√≥gica","falsifica√ß√£o de documentos","uso de laranjas","empresa de fachada","offshore il√≠cita","oculta√ß√£o de bens","quebra de sigilo","crime financeiro","manipula√ß√£o de mercado","insider trading","crime contra o sistema financeiro","crime contra a ordem econ√¥mica","crime contra a ordem tribut√°ria","crime contra a ordem p√∫blica","crime contra a administra√ß√£o p√∫blica","crime contra a administra√ß√£o da justi√ßa","obstru√ß√£o de justi√ßa","prevarica√ß√£o","concuss√£o","crime organizado","organiza√ß√£o criminosa","lavagem il√≠cita","crimes de colarinho branco","esc√¢ndalo","investiga√ß√£o","inqu√©rito","den√∫ncia","acusa√ß√£o","pris√£o","condena√ß√£o","senten√ßa","processo criminal","processo trabalhista","crime trabalhista","explora√ß√£o infantil","trabalho infantil","trabalho escravo","condi√ß√£o an√°loga √† escravid√£o","aliciamento","jornada ilegal","acidente de trabalho","ass√©dio moral","ass√©dio sexual","discrimina√ß√£o","racismo","homofobia","transfobia","viol√™ncia no trabalho","persegui√ß√£o","retalia√ß√£o","amea√ßa","intimida√ß√£o","neglig√™ncia","m√° conduta","conduta anti√©tica","conformidade inadequada","compliance falho","irregularidade societ√°ria","quebra de contrato","lit√≠gio","a√ß√£o judicial","a√ß√£o civil p√∫blica","processo c√≠vel","multa","san√ß√£o","penalidade","advert√™ncia","crime ambiental","polui√ß√£o","desmatamento","extra√ß√£o ilegal","garimpo ilegal","minera√ß√£o ilegal","contamina√ß√£o","res√≠duos t√≥xicos","crime contra a fauna","crime contra a flora","tr√°fico de animais","tr√°fico de drogas","tr√°fico de pessoas","contrabando","descaminho","pirataria","crime cibern√©tico","hacker","invas√£o de sistemas","vazamento de dados","roubo de dados","phishing","ransomware","crime digital","corrup√ß√£o privada","m√°fia","gangue","mil√≠cia","extors√£o","sequestro","homic√≠dio","viol√™ncia","les√£o corporal","amea√ßa criminal","terrorismo","financiamento ao terrorismo","financiamento il√≠cito"]


    if st.button("Buscar no Google"):
        if termo.strip():
            termo_principal = f'"{termo.strip()}"'

            palavras_chave_or = " OR ".join([f'"{kw}"' for kw in palavras_chave])
            query = f'{termo_principal}({palavras_chave_or})'
            query_encoded = urllib.parse.quote(query)

            url_busca = f"https://www.google.com/search?q={query_encoded}"

            st.success("‚úÖ Clique no link abaixo para abrir a busca no Google:")
            st.link_button("üîó Abrir busca no Google", url=url_busca)

            st.code(query, language="text")
        else:
            st.warning("Digite um termo antes de buscar.")

elif menu == "Listas Restritivas Nacionais e Internacionais":
    st.header("üõë Listas Restritivas Nacionais e Internacionais")
    st.info("Verifica se uma pessoa ou empresa est√° em listas restritivas.")

    termo = st.text_input("Digite o nome da pessoa ou empresa:")

    if st.button("Buscar"):
        if termo.strip():
            st.success("‚úÖ Busca realizada com sucesso!")

            # Exemplo de sites de listas (adicione quantos quiser)
            listas = {
                "Lista Suja MTE - Trabalho Escravo": "https://www.gov.br/trabalho-e-emprego/pt-br/assuntos/inspecao-do-trabalho/areas-de-atuacao/cadastro_de_empregadores.pdf",
                "OFAC": "https://sanctionssearch.ofac.treas.gov/",
                "Interpol": "https://www.interpol.int/",
                "FBI": "https://www.fbi.gov/",
                "Europol": "https://www.europol.europa.eu/"
            }

            st.subheader("üîç Pesquisas com Dorking:")

            for nome, site in listas.items():
                url_google = f"https://www.google.com/search?q=site:{site}+%22{termo}%22"
                st.markdown(
                    f'<a href="{url_google}" target="_blank">'
                    f'<button style="background-color:#d9534f;color:white;border:none;padding:8px 12px;'
                    f'border-radius:6px;cursor:pointer;margin:5px;">{nome}</button></a>',
                    unsafe_allow_html=True
                )
        else:
            st.warning("Digite um termo antes de buscar.")


